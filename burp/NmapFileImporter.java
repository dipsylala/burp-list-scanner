package burp;

import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.xpath.*;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

public class NmapFileImporter extends FileImporterBase implements ISiteImporter {

    private IListScannerLogger logger;

    public NmapFileImporter(IListScannerLogger logger){

        this.logger = logger;
    }

    public List<String> loadFile(File file) {

        List<String> sites = new ArrayList<>();
        DocumentBuilder safeDocBuilder = createSafeDocumentFactory();
        if (safeDocBuilder == null){
            this.logger.log("Invalid XML");
            return sites;
        }

        Document doc = loadFileIntoDocument(safeDocBuilder, file);

        // Quicker to use XPATH to return the hosts that only contain
        // what we're interested in, due to the hierarchical nature of
        // the nmap XML
        NodeList hostNodes = getHttpHostsFromXmlDocument(doc);
        if (hostNodes == null) {
            return sites;
        }

        for (int i = 0; i < hostNodes.getLength(); i++) {

            NodeList serviceNodes = ((Element) hostNodes.item(i)).getElementsByTagName("service");
            NodeList hostNameNodes = ((Element) hostNodes.item(i)).getElementsByTagName("hostname");
            for (int j = 0; j < serviceNodes.getLength(); j++) {
                Node serviceNode = serviceNodes.item(j);

                boolean isHttps = isServiceNodeHttps(serviceNode);

                int port = getPortFromServiceNode(serviceNode);
                String hostName = hostNameNodes.item(0).getAttributes().getNamedItem("name").getNodeValue();

                String url = (isHttps?"https":"http") + "://" + hostName + ":" + port;
                sites.add(url);
            }
        }

        return sites;
    }

    @Override
    public boolean canParseFile(File file) {
        return (getExtension(file).toLowerCase().equals("xml"));
    }

    private int getPortFromServiceNode(Node serviceNode) {
        return Integer.parseInt(serviceNode.getParentNode().getAttributes().getNamedItem("portid").getNodeValue());
    }

    private boolean isServiceNodeHttps(Node serviceNode) {
        boolean isHttps = false;

        Node nameNode = serviceNode.getAttributes().getNamedItem("name");
        Node tunnelNode = serviceNode.getAttributes().getNamedItem("tunnel");

        if (nameNode.getNodeValue().equals("https")){
            isHttps = true;
        } else {
            if (tunnelNode!=null){
                isHttps = true;
            }
        }

        return isHttps;
    }

    private NodeList getHttpHostsFromXmlDocument(Document doc) {
        XPathFactory xPathfactory = XPathFactory.newInstance();
        XPath xpath = xPathfactory.newXPath();

        // depending on the kind of scan, service name might be https, or http with an optional tunnel
        // regardless of what we find, quicker to find get each host and work down from there.
        XPathExpression expr = null;
        try {
            expr = xpath.compile("//service[@name='http' or @name='https']/ancestor::host");
            return (NodeList) expr.evaluate(doc, XPathConstants.NODESET);
        } catch (XPathExpressionException e) {
            return null;
        }
    }

    private Document loadFileIntoDocument(DocumentBuilder safeDocBuilder, File nmapXml) {
        try {
            FileInputStream fis = new FileInputStream(nmapXml);
            InputSource is = new InputSource(fis);
            return safeDocBuilder.parse(is);

        } catch (FileNotFoundException e) {
        } catch (SAXException e) {
        } catch (IOException e) {
            System.console().printf(e.getMessage());
        }

        return null;
    }

    private DocumentBuilder createSafeDocumentFactory() {
        DocumentBuilderFactory docBuilderFactory = DocumentBuilderFactory.newInstance();

        // The xml generated by nmap includes a doctype, so we can't use the usual
        // XXE avoidance tactic "disallow-doctype-decl"
        // https://www.owasp.org/index.php/XML_External_Entity_(XXE)_Prevention_Cheat_Sheet#XMLReader
        try {
            docBuilderFactory.setFeature("http://xml.org/sax/features/external-general-entities", false);
            docBuilderFactory.setFeature("http://xml.org/sax/features/external-parameter-entities", false);
            docBuilderFactory.setFeature("http://apache.org/xml/features/nonvalidating/load-external-dtd", false);
            docBuilderFactory.setXIncludeAware(false);
            docBuilderFactory.setExpandEntityReferences(false);

            return docBuilderFactory.newDocumentBuilder();

        } catch (ParserConfigurationException e) {
            return null;
        }
    }
}
